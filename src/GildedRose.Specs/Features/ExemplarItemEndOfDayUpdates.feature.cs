// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GildedRose.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ExemplarItemEndOfDayUpdates")]
    public partial class ExemplarItemEndOfDayUpdatesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "ExemplarItemEndOfDayUpdates.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ExemplarItemEndOfDayUpdates", "\tAs a system owner\r\n\tIn order to manage inventory\r\n\tI need to be confident that c" +
                    "hanges to the implementation haven\'t introduced changes to expected behaviour", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Exemplar items produce expected results when updated")]
        public virtual void ExemplarItemsProduceExpectedResultsWhenUpdated()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Exemplar items produce expected results when updated", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Sell in",
                            "Quality"});
                table1.AddRow(new string[] {
                            "+5 Dexterity Vest",
                            "10",
                            "20"});
                table1.AddRow(new string[] {
                            "Aged Brie",
                            "2",
                            "0"});
                table1.AddRow(new string[] {
                            "Elixir of the Mongoose",
                            "5",
                            "7"});
                table1.AddRow(new string[] {
                            "Sulfuras, Hand of Ragnaros",
                            "0",
                            "80"});
                table1.AddRow(new string[] {
                            "Backstage passes to a TAFKAL80ETC concert",
                            "15",
                            "20"});
#line 8
 testRunner.Given("I have these items:", ((string)(null)), table1, "Given ");
#line hidden
#line 15
 testRunner.When("the items are updated 1 time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Sell in",
                            "Quality"});
                table2.AddRow(new string[] {
                            "+5 Dexterity Vest",
                            "9",
                            "19"});
                table2.AddRow(new string[] {
                            "Aged Brie",
                            "1",
                            "1"});
                table2.AddRow(new string[] {
                            "Elixir of the Mongoose",
                            "4",
                            "6"});
                table2.AddRow(new string[] {
                            "Sulfuras, Hand of Ragnaros",
                            "0",
                            "80"});
                table2.AddRow(new string[] {
                            "Backstage passes to a TAFKAL80ETC concert",
                            "14",
                            "21"});
#line 16
 testRunner.Then("the updated items are:", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Exemplar items produce expected results when updated 15 times")]
        public virtual void ExemplarItemsProduceExpectedResultsWhenUpdated15Times()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Exemplar items produce expected results when updated 15 times", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Sell in",
                            "Quality"});
                table3.AddRow(new string[] {
                            "+5 Dexterity Vest",
                            "10",
                            "20"});
                table3.AddRow(new string[] {
                            "Aged Brie",
                            "2",
                            "0"});
                table3.AddRow(new string[] {
                            "Elixir of the Mongoose",
                            "5",
                            "7"});
                table3.AddRow(new string[] {
                            "Sulfuras, Hand of Ragnaros",
                            "0",
                            "80"});
                table3.AddRow(new string[] {
                            "Backstage passes to a TAFKAL80ETC concert",
                            "15",
                            "20"});
#line 27
 testRunner.Given("I have these items:", ((string)(null)), table3, "Given ");
#line hidden
#line 34
 testRunner.When("the items are updated 15 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Sell in",
                            "Quality"});
                table4.AddRow(new string[] {
                            "+5 Dexterity Vest",
                            "-5",
                            "0"});
                table4.AddRow(new string[] {
                            "Aged Brie",
                            "-13",
                            "28"});
                table4.AddRow(new string[] {
                            "Elixir of the Mongoose",
                            "-10",
                            "0"});
                table4.AddRow(new string[] {
                            "Sulfuras, Hand of Ragnaros",
                            "0",
                            "80"});
                table4.AddRow(new string[] {
                            "Backstage passes to a TAFKAL80ETC concert",
                            "0",
                            "50"});
#line 35
 testRunner.Then("the updated items are:", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Exemplar items produce expected results when updated 16 times")]
        public virtual void ExemplarItemsProduceExpectedResultsWhenUpdated16Times()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Exemplar items produce expected results when updated 16 times", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Sell in",
                            "Quality"});
                table5.AddRow(new string[] {
                            "+5 Dexterity Vest",
                            "10",
                            "20"});
                table5.AddRow(new string[] {
                            "Aged Brie",
                            "2",
                            "0"});
                table5.AddRow(new string[] {
                            "Elixir of the Mongoose",
                            "5",
                            "7"});
                table5.AddRow(new string[] {
                            "Sulfuras, Hand of Ragnaros",
                            "0",
                            "80"});
                table5.AddRow(new string[] {
                            "Backstage passes to a TAFKAL80ETC concert",
                            "15",
                            "20"});
#line 45
 testRunner.Given("I have these items:", ((string)(null)), table5, "Given ");
#line hidden
#line 52
 testRunner.When("the items are updated 16 times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Sell in",
                            "Quality"});
                table6.AddRow(new string[] {
                            "+5 Dexterity Vest",
                            "-6",
                            "0"});
                table6.AddRow(new string[] {
                            "Aged Brie",
                            "-14",
                            "30"});
                table6.AddRow(new string[] {
                            "Elixir of the Mongoose",
                            "-11",
                            "0"});
                table6.AddRow(new string[] {
                            "Sulfuras, Hand of Ragnaros",
                            "0",
                            "80"});
                table6.AddRow(new string[] {
                            "Backstage passes to a TAFKAL80ETC concert",
                            "-1",
                            "0"});
#line 53
 testRunner.Then("the updated items are:", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
